/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * openobd
 * Copyright (C) Simon Booth 2010 <simesb@users.sourceforge.net>
 *
 * openobd is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * openobd is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <wx/wxprec.h>

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include <wx/wx.h>
#endif

#include <wx/tokenzr.h>
#include <cstring>
#include <fcntl.h>
#include "obdbase.h"
#include "logPanel.h"
#include "ctb-0.15/ctb.h"

using namespace std;
using namespace ctb;

/// \class obdbase
/// \brief A superclass for controlling obd-ii interface devices.
///
/// Meh

obdbase::obdbase ()
{
    // create a new serial port object
	port = new ctb::SerialPort();

	// setup the defaults
	this->obd_use_checksums(true);
	this->obd_use_imperial(false);

	this->logger = NULL;
	this->logExtra = true;
}

obdbase::obdbase (const wxString& SerialPort)
{
    // create a new serial port object
	port = new ctb::SerialPort();
	// and connect it to the chosen port
    this->obd_device_connect(SerialPort);

	// setup the defaults
	this->obd_use_checksums(true);
	this->obd_use_imperial(false);

	this->logger = NULL;
	this->logExtra = true;
}

obdbase::~obdbase ()
{
    this->obd_device_disconnect();
    delete port;
}

/// \brief Connect to a serial port
///
/// \param SerialPort The name of the port to connect to.
void obdbase::obd_device_connect (const wxString& SerialPort)
{
    int baudrate = 9600;

    port->Open(SerialPort.mb_str(wxConvUTF8), baudrate);
}

/// \brief Disconnect from an open serial port
///
void obdbase::obd_device_disconnect ()
{
    port->Close();
}

/// \brief Toggle the use of checksums
///
/// \param use Boolean value indicating if we want to use checksums or not.
void obdbase::obd_use_checksums (bool use)
{
	this->useChecksum = use;
}

/// \brief Toggle the use of imperial measurements
///
/// \param use Boolean value indicating if we wish to return results in imperial
/// rather than metric.
void obdbase::obd_use_imperial (bool use)
{
	this->useImperial = use;
}

/// \brief Have we previously been requested to use imperial measurments
///
/// \return True if we are returning imperial results.
bool obdbase::obd_is_imperial ()
{
	return this->useImperial;
}

void obdbase::obd_set_logger (logPanel* log)
{
	this->logger = log;
}

int obdbase::obd_mil_status()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting MIL Status\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_DTC_STATUS, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		if (toks[2] > 0x80) {
			result = toks[2] - 0x80;
		} else {
			result = 0;
		}

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received MIL Response: %d.\n"), result);
			logger->appendLog(msg, logPanel::LOG_IN);
		}
	}

	return result;
}

/// \brief Request the ECU to clear stored trouble codes
///
/// The ECU stores trouble codes when it illuminates the MIL (Malfunction
/// Indicator Lamp).  This function sends a request to the ECU through the
/// interface to clear these stored codes.
///
/// \return True if the trouble codes have been successfully cleared.
bool obdbase::obd_clear_dtc ()
{
	bool result = false;
	int toks[3];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting clearing of DTC's\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(0x04, toks, sizeof(toks))) {
		result = true;

		// write to log if necessary
		if (logger) {
			msg = _("DTC's successfully cleared\n");
			logger->appendLog(msg, logPanel::LOG_IN);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not clear DTC's\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

bool obdbase::obd_write(const wxString& command, int count)
{
	int len;
	char cstring[256] = "";
	bool retval = false;

	strncat(cstring, (const char*)command.mb_str(wxConvUTF8), command.Length());

	// end the command correctly with a CR
	len = strlen(cstring);
	cstring[len] = 0x0d;
	cstring[len+1] = 0x00;

	if (port->Write(cstring, strlen(cstring)) == (count + 1)) {
		retval = true;
	}

	return retval;
}

wxString obdbase::obd_read()
{
	wxString result;
	char * buff = NULL;
	char * p = (char *)">";
	int read;
	size_t size;

	read = port->ReadUntilEOS(buff, &size, p, 5000, 0);

	// strip out non printing chars
	for (int i = 0; i < sizeof(buff); i++) {
		if (iscntrl(buff[i]))
			buff[i] = 0x20;
	}

	// set up the return string
	result = wxString::From8BitData(buff);
	result = result.Strip(wxString::both);

	delete buff;

	return result;
}

void obdbase::obd_calculate_checksum ()
{
	//TODO Calculate checksum from tokens
}

bool obdbase::obd_validate_checksum ()
{
	//TODO Validate checksum against calculation
	return true;
}

void obdbase::obd_append_checksum ()
{
}

wxString obdbase::obd_identify_device()
{
    wxString result = wxT("Superclass for devices");
	return result;
}

wxString obdbase::obd_get_protocol()
{
	wxString result = wxT("Superclass for devices");
	return result;
}

bool obdbase::obd_pid_get_raw(int pid, int tokens[], int toksize)
{
	wxString raw;
	wxString msg;
	bool chkHead = false;
	bool chkSum = false;
	int scale;
	int index = 0;
	int expHead;
	int actHead;

	// convert pid to wxString
	scale = ((pid / 255) + 1) * 2;		// number of 'bytes' * 2
	wxString pidString = wxString::Format(_T("%0*x"), scale, pid);

	// send to device
	if (this->obd_write(pidString, pidString.length())) {

//		sleep(10);
//		usleep(20000);
		// read return from device
		raw = this->obd_read();

		// write the raw response to the log if needed
		if (logger && logExtra) {
			msg.Printf(_("Raw data: %s\n"), raw.c_str());
			logger->appendLog(msg, logPanel::LOG_IN);
		}

		// tokenise the string
		wxStringTokenizer tkz(raw, wxT(" "));
		while ( tkz.HasMoreTokens()  && index <= toksize )
		{
			wxString token = tkz.GetNextToken();
			token.ToLong((long int*)&tokens[index], 16);
			index++;
		}

		// check header
		scale = (scale / 2);			// redefine scale as no of 'bytes' expected
		expHead = pid + (64 * pow(256, (scale - 1)));
		actHead = 0;
		for (int i = 0; i < scale; i++) {
			actHead += pow(256, (scale - 1 - i)) * tokens[i];
		}
		if (actHead == expHead) {
			chkHead = true;
		}

		// check checksum
		if (useChecksum) {
			// TODO: Calculate and check the checksum
			chkSum = true;
		} else {
			chkSum = true;
		}
	}

	return (chkHead && chkSum);
}

/// \brief Request the instantaneous engine load.
///
/// A convenience function to calculate the instantaneous engine load.
/// The formula is \f$((x * 100) / 255)\f$
///
/// \see obd_pid_get_raw()
/// \return The current engine load as a percentage. (-1 if the engine
/// load cannot be determined.)
double obdbase::obd_pid_engine_load ()
{
	double result = -1.0;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting engine load\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_ENGINE_LOAD, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = toks[2] * 100 / 255;

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Reported engine load: %f\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get engine load\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

/// \brief Request the instantaneous coolant temperature.
///
/// A convenience function to calculate the instantaneous coolant
/// temperature. The formula is \f$(x -40)\f$
///
/// \see obd_pid_get_raw()
/// \see obd_use_imperial()
/// \return The current coolant temperature in celcius or farenheit.
/// (-1 if the coolant temp cannot be determined.)
int obdbase::obd_pid_coolant_temp ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting coolant temperature\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_COOLANT_TEMP, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = toks[2] - 40;

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received coolant temperature: %d\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get coolant temperature\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	// convert from centigrade to farenheit if necessary
	if (useImperial) {
		result = this->convert_c_to_f(result);
	}

	return result;
}

/// \brief Request the instantaneous engine RPM.
///
/// A convenience function to calculate the instantaneous engine RPM.
/// The formula is \f$((x * 256) + y) / 4\f$
///
/// \see obd_pid_get_raw()
/// \return The current engine RPM (in quarters of an RPM).
/// (-1 if the engine RPM cannot be determined.)
double obdbase::obd_pid_engine_rpm ()
{
	double result = -1.0;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting engine RPM\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_ENGINE_RPM, toks, sizeof(toks))) {

		// get the value of the '3rd & 4th bytes' and apply conversion formula
		result = ((toks[2] * 256.0) + (toks[3])) / 4.0;

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Receieved engine RPM: %.2f\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get engine RPM\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

/// \brief Request the instantaneous coolant temperature.
///
/// A convenience function to calculate the instantaneous coolant
/// temperature. The formula is \f$(x -40)\f$
///
/// \see obd_pid_get_raw()
/// \see obd_use_imperial()
/// \return The current coolant temperature in celcius or farenheit.
/// (-1 if the coolant temp cannot be determined.)
int obdbase::obd_pid_vehicle_speed ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting vehicle speed\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_VEHICLE_SPEED, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = toks[2];

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received vehicle speed: %d kph\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get vehicle speed\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	// convert from centigrade to farenheit if necessary
	if (useImperial) {
		result = this->convert_kph_to_mph(result);
	}

	return result;
}

int obdbase::obd_pid_mil_time ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting MIL lit time\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_MIL_TIME, toks, sizeof(toks))) {

		// get the value of the '3rd & 4th bytes' and apply conversion formula
		result = (toks[2] * 256) + toks[3];

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received MIL lit time: %d minutes\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get MIL lit time\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

int obdbase::obd_pid_mil_dist ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting distance travelled with MIL lit\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_MIL_DIST, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = (toks[2] * 256) + toks[3];

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received distance travelled with MIL lit: %d km\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get distance travelled with MIL lit\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	// convert from centigrade to farenheit if necessary
	if (useImperial) {
		result = this->convert_kph_to_mph(result);
	}

	return result;
}

int obdbase::obd_pid_fuel_press ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting fuel pressure\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_FUEL_PRESS, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = (toks[2] * 3);

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received fuel pressure: %d kPa\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get fuel pressure\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

int obdbase::obd_pid_intake_press ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting intake manifold pressure\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_INTAKE_PRESS, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = toks[2];

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received intake manifold pressure: %d kPa\n"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get intake manifold pressure\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

int obdbase::obd_pid_intake_temp ()
{
	int result = -1;
	int toks[10];
	wxString msg;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting intake temperature\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(PID_INTAKE_TEMP, toks, sizeof(toks))) {

		// get the value of the '3rd byte' and apply conversion formula
		result = (toks[2] - 40);

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Received intake temperature: %d C\n"), result);
			logger->appendLog(msg, logPanel::LOG_OUT);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get intake temperature\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	// convert from centigrade to farenheit if necessary
	if (useImperial) {
		result = this->convert_kph_to_mph(result);
	}

	return result;
}

bool obdbase::obd_is_connected ()
{
    bool retval;

    if (port->IsOpen() == 1) {
        retval = true;
    } else {
        retval = false;
    }

    return retval;
}

double obdbase::obd_pid_fuel_trim (trim_term term, int bank)
{
	double result = -1.0;
	int toks[10];
	wxString msg;
	int pid;

	// write to log if necessary
	if (logger) {
		msg = _("Requesting fuel trim\n");
		logger->appendLog(msg, logPanel::LOG_OUT);
	}

	pid = PID_BANK1_STFT + term + bank;

	// return -1 if we haven't got a well formed response
	if (this->obd_pid_get_raw(pid, toks, sizeof(toks))) {

		// get the value of the '3rd' and apply conversion formula
		result = ((toks[3] - 128) * 100 / 128);

		// write to log if necessary
		if (logger) {
			msg.Printf(_("Receieved fuel trim: %.2f\n %%"), result);
			logger->appendLog(msg, logPanel::LOG_OTHER);
		}
	} else {
		// write to log if necessary
		if (logger) {
			msg = _("Could not get fuel trim\n");
			logger->appendLog(msg, logPanel::LOG_ERROR);
		}
	}

	return result;
}

int obdbase::convert_c_to_f (int centigrade)
{
	return (9 / 5) * centigrade + 32;
}

int obdbase::convert_kph_to_mph (int kph)
{
	return kph / 1.60934400061;
}
