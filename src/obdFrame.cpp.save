/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * openobd
 * Copyright (C) Simon Booth 2010 <simesb@users.sourceforge.net>
 *
 * openobd is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * openobd is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// For compilers that support precompilation, includes "wx/wx.h".
#include <wx/wxprec.h>

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include <wx/wx.h>
	#include <wx/aui/auibook.h>
	#include <wx/msgdlg.h>
	#include <wx/filedlg.h>
#endif

#include <wx/aboutdlg.h>
#include "obdFrame.h"
#include "header.h"
#include "obdbase.h"
#include "elm327.h"
#include "logPanel.h"
#include "milPanel.h"
#include "dlgOptions.h"

obdFrame::obdFrame( wxWindow* parent )
:
obdBaseFrame( parent )
{
	int rc;
	wxString logText(_("New Session started\n"));

	obd = new obdbase();
	log = new logPanel (m_auinotebook1);
	obd->obd_set_logger(log);
	log->appendLog(logText, logPanel::LOG_OTHER);
	m_auinotebook1->AddPage( log, _("Log"), false, wxNullBitmap );
	m_statusBar1->SetStatusText(_("Not connected"), 1);

	rc = sqlite3_open_v2("openobd.db", &db, SQLITE_OPEN_READWRITE, NULL);
	if (rc != SQLITE_OK) {
		printf("Cannot open db: %s\n", sqlite3_errmsg(db));
		sqlite3_close(db);
	}

	// setup the options
	options.imperial = false;
#if defined (WIN32)
	options.port = _T("COM1");
#else
	options.port = _T("/dev/ttyS0");
#endif
}

obdFrame::~obdFrame()
{
	sqlite3_close(db);
}

void obdFrame::onMenuExport( wxCommandEvent& event )
{
	wxString filter = wxRichTextBuffer::GetExtWildcard(false, true);
    wxString path;
    wxString filename;

	// call up a dialog for filename
    wxFileDialog dialog(this,
        _("Choose a filename"),
        path,
        filename,
        filter,
        wxFD_SAVE | wxOVERWRITE_PROMPT);

	// if positive return, save file.
    if (dialog.ShowModal() == wxID_OK)
    {
        wxString path = dialog.GetPath();

        if (!path.empty())
        {
			log->SaveFile(path);
        }
    }
}

void obdFrame::onMenuQuit( wxCommandEvent& event )
{
	this->Close();
}

void obdFrame::onMenuViewLog( wxCommandEvent& event )
{
	int index;

	index = m_auinotebook1->GetPageIndex(log);
	if (index == wxNOT_FOUND) {
		m_auinotebook1->AddPage( log, _("Log"), false, wxNullBitmap );
		index = m_auinotebook1->GetPageIndex(log);
		m_auinotebook1->SetSelection(index);
		menuViewLog->Check(true);
	} else if (m_auinotebook1->GetPageCount() == 1) {
		wxMessageDialog *dialog = new wxMessageDialog(NULL, 
      		_("You may not close the last tab!"), wxT("Error"), 
      		wxICON_ERROR);
  		dialog->ShowModal();
		menuViewLog->Check(true);
	} else if (m_auinotebook1->GetSelection() != index) {
		m_auinotebook1->SetSelection(index);
		menuViewLog->Check(true);
	} else {
		m_auinotebook1->RemovePage(index);
		menuViewLog->Check(false);
	}
}

void obdFrame::onMenuViewMIL( wxCommandEvent& event )
{
	int index;

	index = m_auinotebook1->GetPageIndex(mil);
	
	if (index == wxNOT_FOUND) {
		mil = new milPanel(this, obd, db);
		m_auinotebook1->AddPage(mil, _("MIL Status"), true, wxNullBitmap);
		mil->updateStatus();
		menuViewMIL->Check(true);
	} else if (m_auinotebook1->GetSelection() != index) {
		m_auinotebook1->SetSelection(index);
		menuViewMIL->Check(true);
	} else {
		m_auinotebook1->DeletePage(index);
		menuViewMIL->Check(false);
		if (!obd->obd_is_connected()) {
			menuViewMIL->Enable(false);
		}
	}
}

void obdFrame::onMenuConnect( wxCommandEvent& event )
{
	elm327* elm;
	wxString logText;
	logType type = logPanel::LOG_OUT;
	wxString statusText;
	
	if (obd->obd_is_connected()) {
		obd->obd_device_disconnect();
		menuConnect->SetText(_("&Connect to interface"));
		menuConnect->SetHelp(_("Connect to OBD-II interface"));
		statusText = _("Not connected");
		logText.Printf(_("Disconnected from device on %s\n"), options.port.c_str());
		
		// only disable the MIL menu item if is not checked
		if (menuViewMIL->IsChecked()) {
			menuViewMIL->Enable(menuViewMIL->IsChecked());
			mil->enableButton(false);
		}
	} else {
		elm = new elm327(options.port);
		if (elm->obd_is_connected()) {
			obd = elm;
			obd->obd_set_logger (log);
			menuConnect->SetText(_("&Disconnect from interface"));
			menuConnect->SetHelp(_("Disconnect from OBD-II interface"));
			statusText.Printf(_("Connected: %s (%s)"), obd->obd_identify_device().c_str(),
							obd->obd_get_protocol().c_str());
			logText.Printf(_("Connected to device on %s\n"), options.port.c_str());
			menuViewMIL->Enable(true);
			if (menuViewMIL->IsChecked()) {
				mil->enableButton(true);
			}
			if (options.imperial) {
				obd->obd_use_imperial(true);
			}
		} else {
			delete elm;
			statusText = _("Not connected");
			logText.Printf(_("Unable to connected to device on %s\n"), options.port.c_str());
			type = LOG_ERROR;
		}
	}
	
	m_statusBar1->SetStatusText(statusText, 1);
	log->appendLog(logText, type);
}

void obdFrame::onMenuPrefs( wxCommandEvent& event )
{
	dlgOptions* dlg = new dlgOptions (this, obd, &options);
	dlg->ShowModal();
}

void obdFrame::onMenuViewPIDs( wxCommandEvent& event )
{
	obd->obd_pid_engine_load ();
	obd->obd_pid_coolant_temp ();
	obd->obd_pid_engine_rpm ();
	obd->obd_pid_vehicle_speed ();
	obd->obd_pid_mil_time ();
	obd->obd_pid_mil_dist ();
	obd->obd_pid_intake_press ();
	obd->obd_pid_fuel_press ();
	obd->obd_pid_intake_temp ();
}

void obdFrame::onMenuAbout( wxCommandEvent& event )
{
	wxAboutDialogInfo info;
	wxArrayString devs;

	devs.Add(_T("Simon Booth <simesb@users.sourceforge.net>"));
	devs.Add(_("CTB code from https://iftools.com/opensource/ctb.en.php"));

	info.SetName(_("openOBD"));
	info.SetVersion(_T(openobd_version));
	info.SetDescription(_("Opensource OBD-II interface device controller\n" \
				"Released under GPLv3"));
	info.SetDevelopers(devs);
	info.SetCopyright(_("Copyright (C) 2010 Simon Booth <simesb@users.sourceforge.net>"));
	info.SetWebSite(_T("http://openobd.sourceforge.net"));

	wxAboutBox(info);

}
